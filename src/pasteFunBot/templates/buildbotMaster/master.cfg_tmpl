[buildout]
master-parts =
    master
    ${egg} 
    poller

[master]
recipe = ${recipe}:master
# Nom du projet
project-name = ${project} project
#Url du projet
project-url = http://${hostname}:${wport}/

# Autoriser la construction de force sur l'interface web
allow-force = true

# Pour interne utilise pour les slaves
port = ${port}

# port http
wport = ${wport}

# url du buildbot changez le si vous utiliser un virtual host
url = http://${hostname}:${wport}/

# fichiers statiques
public-html = ${directory}/public_html

# Noms et mots de passe des slaves
slaves =
    ${slaves} ${slaves_pwd}

[${project}]
recipe = ${recipe}:project
#Noms des slaves
slave-names = ${slaves}
#utilitaire de versionnement utilise
vcs = ${vcs}
#Adresse du depot de versionnement du projet
repositories = ${vcs_url}

# notifications
#mail-host = localhost
#email-notification-sender = buildbot@stpda-laptop
#email-notification-recipients =
#    my.project@my.company.com

#Periodicite (en min) des tests, par defaut, toutes les heures 
#periodic-scheduler=60

#Cron de la construction 
cron-scheduler = 0 8 * * *


#Sequence de commandes pour la construction des applications
#Vous pouvez faire construire l'application de la maniere dont vous le souhaitez
#Cependant, utilisez le python python-\${project} pour executer ces actions 
build-sequence =
	python-${project} bootstrap.py
	python-${project} bin/buildout -vvvvv

#Pour r√©aliser vos tests, il est necessaire de creer dans le dossier build
#du buildbot un script bash contenant les tests a executer
test-sequence =
    ./test-sequence.sh	

[poller]
recipe = ${recipe}:poller
#Adresse du depot de versionnement du projet (il est possible de donner une
# liste de depots)
repositories = ${vcs_url}
#Nom d'utilisateur du depot
user = ${vcs_user}
#Mot de passe d'utilisateur du depot
password = ${vcs_user_password}
#Intervale de temps (en secondes) de verification des changements sur le depot
poll-interval = 120

