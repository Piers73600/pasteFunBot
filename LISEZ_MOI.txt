================================================================================
				Paster FunBot
================================================================================

*********************************Description************************************

Le paster funbot, vous permet de créer un projet contenant la construction d'une
application mais également des tests de montée en charge grace à l'outil
funkload.

***********************************Recquis**************************************

Master:
-------

L'application en recquiert rien de particulier au niveau de la machine master

Slave:
------

Pour l'esclave, vous aurez besoin d'installer: 
    - gnuplot: pour pouvoir générer les rapports
    - un serveur apache: pour pouvoir afficher ces rapports et les rendre
    accessibles de l'extérieur
 
*********************************Utilisation************************************

Tout d'abord, une fois pasteFunBot récupéré, il vous faudra utiliser la 
commande suivante:

python setup.py develop

Afin d'adapter l'application à votre python.

Ensuite, pour verifier si l'installation du paster a bien fonctionné, utilisez
la commande suivante:

paster create --list-templates

Et vous devriez avoir dans votre liste des informations du genre:

buildbot:	A template for collective.buildbot
funbot_master:	Configuration d'un maitre buildbot
funbot_slave:	Configuration d'un esclave buildbot ainsi que de tests de montee
		en charge funkload
...

funbot est alors bien installé !

Maintenant, il ne vous reste plus qu'a utiliser ce nouveau paster:

paster create -t funbot_master
ou
paster create -t funbot_slave

Après avoir répondu à diverses questions, la configuration générale du projet 
sera réalisée.
Cependant, il vous reste quelques actions à effectuer.

********************************Configuration**********************************

Si vous avez créé un master:
----------------------------
Premièrement, entrez dans le fichier master.cfg et indiquez le nom des esclaves
ainsi que leur mots de passe.
Deuxièmement, dans ce même fichier, vous pouvez spécifier les lignes de 
commandes à executer par les esclaves, dans la section monprojet dans la
variable build-sequence.

Note: rappelons qu'il vous faut créer un lien symbolique chez les esclaves
dénommé python-monprojet dans un dossier nommé bin/ pointant sur le python que 
vous voulez utiliser.

Troisièmement, toujours dans la configuration du master, il est également
possible, comme pour la construction de l'application de préciser les
lignes de commandes servant de test cette dernière.
Pour simplifier l'écriture de ces tests, nous utilisons des Makefile situés 
dans les sous-repertoires de funkload/ .
Des exemples de ces fichiers sont disponibles dans les répertoires de base de
l'esclave.
Il est donc conseillé d'utiliser une simple commande make dans la test_sequence
comme indiqué dans la configuration par défaut.

Une fois la configuration effectuée, entrez les commandes suivantes:
python bootstrap.py
./bin/buildout

Votre master est alors configuré comme il se doit, vous pouvez donc le lancer:
./bin/master [start | restart |stop]

Si vous avez créé un slave:
---------------------------

Tout d'abord, il vous est conseillé de regarder les fichiers de tests contenus
dans le dossier funkload pour que vous puissiez prendre en main l'outil.
Un Lisez-moi est disponible dans ce dossier, expliquant le fonctionnement
global de funkload.

Ensuite, dans le but de rendre vos rapports de tests accessibles de l'exterieur
il est nécessaire de faire un lien symbolique nommé "reports" vers le dossier du
même nom contenu dans le dossier funkload du projet de la machine esclave.

Une fois la configuration effectuée, entrez les commandes suivantes:
python bootstrap.py
./bin/buildout

Votre master est alors configuré comme il se doit, vous pouvez donc le lancer:
./bin/nomdevotremachine [start | restart |stop]

Quelques dernières manipulations sur l'esclave:
-----------------------------------------------

=> Vérifiez les droits d'exécution du fichier make_reports.sh afin de permettre
au slave de l'executer
=> Créez un lien symbolique nommé reports, liant le dossier du même nom situé
dans le dossier funkload du funbot_slave
